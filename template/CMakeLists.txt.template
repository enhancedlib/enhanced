## Copyright (C) 2021 Liu Baihao. All rights reserved.
## This product is licensed under Enhanced License.
##
## This copyright disclaimer is subject to change without notice.
##
## This software is a free software,
## everyone can change, copy, publication, demonstrate, use, etc.
##
## If you change and publication this software,
## must credit the original software source and author's name,
## and include this copyright disclaimer and
## the license of this software in your software.
##
## This software and documentation may provide
## third-party content, product and other information.
## I am not responsible for any loss or damage caused
## by your access to or use of third-party content, products, etc.

cmake_minimum_required(VERSION 3.0)

set(MODULE_NAME )
set(MODULE_FULL_NAME )
set(PROMPT "[Module: ${MODULE_NAME} (${MODULE_FULL_NAME})]")

set(REQUIRES_MODULES )
set(INCLUDE_DIRECTORIES "include")

set(
    SOURCES
)

set(
    HEADERS
)

message("${PROMPT} Configuring module: ${MODULE_FULL_NAME}")
message("${PROMPT} Module path: \"${CMAKE_CURRENT_SOURCE_DIR}\"")

if (SOURCES)
    message("${PROMPT} Source files: ${SOURCES}")
else ()
    message("${PROMPT} There aren't any source files in this module")
endif ()

if (HEADERS)
    message("${PROMPT} Header files: ${HEADERS}")
else ()
    message("${PROMPT} There aren't any header files in this module")
endif ()

foreach (REQUIRES_MODULE_FULL_NAME IN ITEMS ${REQUIRES_MODULES})
    string(TOUPPER ${REQUIRES_MODULE_FULL_NAME} REQUIRES_MODULE_FULL_NAME_UPPER)
    set(INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORIES} "${MODULE_${REQUIRES_MODULE_FULL_NAME_UPPER}_ROOT}/include")
endforeach ()

if (REQUIRES_MODULES)
    message("${PROMPT} Requires modules: ${REQUIRES_MODULES}")
else ()
    message("${PROMPT} This module doesn't requires other modules")
endif ()
message("${PROMPT} Included directories: ${INCLUDE_DIRECTORIES}")

add_library(${MODULE_FULL_NAME}-StaticLibrary STATIC ${SOURCES} ${HEADERS})
message("${PROMPT} Adds target (static library) \"${MODULE_FULL_NAME}-StaticLibrary\"")
add_library(${MODULE_FULL_NAME} SHARED ${SOURCES} ${HEADERS})
message("${PROMPT} Adds target (dynamic library) \"${MODULE_FULL_NAME}\"")

target_compile_definitions(${MODULE_FULL_NAME} PUBLIC __ENHANCED_DYNAMIC_LIBRARY__)
target_compile_definitions(${MODULE_FULL_NAME} PRIVATE __ENHANCED_EXPORTS__)

string(TOUPPER ${BUILD_TYPE} BUILD_TYPE_UPPER)
target_compile_definitions(${MODULE_FULL_NAME}-StaticLibrary PUBLIC __${BUILD_TYPE_UPPER}__)
target_compile_definitions(${MODULE_FULL_NAME} PUBLIC __${BUILD_TYPE_UPPER}__)

target_include_directories(${MODULE_FULL_NAME}-StaticLibrary PRIVATE ${INCLUDE_DIRECTORIES})
target_include_directories(${MODULE_FULL_NAME} PRIVATE ${INCLUDE_DIRECTORIES})

foreach (REQUIRES_MODULE_FULL_NAME IN ITEMS ${REQUIRES_MODULES})
    target_link_libraries(${MODULE_FULL_NAME} PRIVATE ${REQUIRES_MODULE_FULL_NAME})
    message("${PROMPT} The target \"${MODULE_FULL_NAME}\" links library \"${REQUIRES_MODULE_FULL_NAME}\"")
endforeach ()

set_target_properties(${MODULE_FULL_NAME}-StaticLibrary PROPERTIES OUTPUT_NAME ${MODULE_FULL_NAME})
set_target_properties(${MODULE_FULL_NAME} PROPERTIES OUTPUT_NAME ${MODULE_FULL_NAME})

if (WIN32)
    set_target_properties(${MODULE_FULL_NAME}-StaticLibrary PROPERTIES PREFIX "lib")
    set_target_properties(${MODULE_FULL_NAME} PROPERTIES PREFIX "")
endif ()

if (${BUILD_TYPE} STREQUAL "Release")
    install(DIRECTORY "include" DESTINATION "${CMAKE_INSTALL_PREFIX}")
    message("${PROMPT} Installs directory \"include\" to ${CMAKE_INSTALL_PREFIX}")
    install(TARGETS ${MODULE_FULL_NAME}-StaticLibrary)
    message("${PROMPT} Installs target \"${MODULE_FULL_NAME}-StaticLibrary\"")
    install(TARGETS ${MODULE_FULL_NAME})
    message("${PROMPT} Installs target \"${MODULE_FULL_NAME}\"")
else ()
    install(TARGETS ${MODULE_FULL_NAME} DESTINATION "${CMAKE_INSTALL_PREFIX}")
    message("${PROMPT} Installs target \"${MODULE_FULL_NAME}\" to \"${CMAKE_INSTALL_PREFIX}\"")
endif ()

message("${PROMPT} Module configuring done")
